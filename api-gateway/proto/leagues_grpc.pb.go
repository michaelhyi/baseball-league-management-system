// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/leagues.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LeaguesService_CreateLeague_FullMethodName       = "/proto.LeaguesService/CreateLeague"
	LeaguesService_GetLeague_FullMethodName          = "/proto.LeaguesService/GetLeague"
	LeaguesService_GetLeagueStandings_FullMethodName = "/proto.LeaguesService/GetLeagueStandings"
	LeaguesService_UpdateLeague_FullMethodName       = "/proto.LeaguesService/UpdateLeague"
	LeaguesService_DeleteLeague_FullMethodName       = "/proto.LeaguesService/DeleteLeague"
)

// LeaguesServiceClient is the client API for LeaguesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaguesServiceClient interface {
	CreateLeague(ctx context.Context, in *CreateLeagueRequest, opts ...grpc.CallOption) (*LeagueId, error)
	GetLeague(ctx context.Context, in *LeagueId, opts ...grpc.CallOption) (*GetLeagueResponse, error)
	GetLeagueStandings(ctx context.Context, in *LeagueId, opts ...grpc.CallOption) (*GetLeagueStandingsResponse, error)
	UpdateLeague(ctx context.Context, in *UpdateLeagueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteLeague(ctx context.Context, in *LeagueId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type leaguesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaguesServiceClient(cc grpc.ClientConnInterface) LeaguesServiceClient {
	return &leaguesServiceClient{cc}
}

func (c *leaguesServiceClient) CreateLeague(ctx context.Context, in *CreateLeagueRequest, opts ...grpc.CallOption) (*LeagueId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeagueId)
	err := c.cc.Invoke(ctx, LeaguesService_CreateLeague_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaguesServiceClient) GetLeague(ctx context.Context, in *LeagueId, opts ...grpc.CallOption) (*GetLeagueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLeagueResponse)
	err := c.cc.Invoke(ctx, LeaguesService_GetLeague_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaguesServiceClient) GetLeagueStandings(ctx context.Context, in *LeagueId, opts ...grpc.CallOption) (*GetLeagueStandingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLeagueStandingsResponse)
	err := c.cc.Invoke(ctx, LeaguesService_GetLeagueStandings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaguesServiceClient) UpdateLeague(ctx context.Context, in *UpdateLeagueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LeaguesService_UpdateLeague_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaguesServiceClient) DeleteLeague(ctx context.Context, in *LeagueId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LeaguesService_DeleteLeague_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaguesServiceServer is the server API for LeaguesService service.
// All implementations must embed UnimplementedLeaguesServiceServer
// for forward compatibility.
type LeaguesServiceServer interface {
	CreateLeague(context.Context, *CreateLeagueRequest) (*LeagueId, error)
	GetLeague(context.Context, *LeagueId) (*GetLeagueResponse, error)
	GetLeagueStandings(context.Context, *LeagueId) (*GetLeagueStandingsResponse, error)
	UpdateLeague(context.Context, *UpdateLeagueRequest) (*emptypb.Empty, error)
	DeleteLeague(context.Context, *LeagueId) (*emptypb.Empty, error)
	mustEmbedUnimplementedLeaguesServiceServer()
}

// UnimplementedLeaguesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLeaguesServiceServer struct{}

func (UnimplementedLeaguesServiceServer) CreateLeague(context.Context, *CreateLeagueRequest) (*LeagueId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLeague not implemented")
}
func (UnimplementedLeaguesServiceServer) GetLeague(context.Context, *LeagueId) (*GetLeagueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeague not implemented")
}
func (UnimplementedLeaguesServiceServer) GetLeagueStandings(context.Context, *LeagueId) (*GetLeagueStandingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeagueStandings not implemented")
}
func (UnimplementedLeaguesServiceServer) UpdateLeague(context.Context, *UpdateLeagueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLeague not implemented")
}
func (UnimplementedLeaguesServiceServer) DeleteLeague(context.Context, *LeagueId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLeague not implemented")
}
func (UnimplementedLeaguesServiceServer) mustEmbedUnimplementedLeaguesServiceServer() {}
func (UnimplementedLeaguesServiceServer) testEmbeddedByValue()                        {}

// UnsafeLeaguesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaguesServiceServer will
// result in compilation errors.
type UnsafeLeaguesServiceServer interface {
	mustEmbedUnimplementedLeaguesServiceServer()
}

func RegisterLeaguesServiceServer(s grpc.ServiceRegistrar, srv LeaguesServiceServer) {
	// If the following call pancis, it indicates UnimplementedLeaguesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LeaguesService_ServiceDesc, srv)
}

func _LeaguesService_CreateLeague_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLeagueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaguesServiceServer).CreateLeague(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaguesService_CreateLeague_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaguesServiceServer).CreateLeague(ctx, req.(*CreateLeagueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaguesService_GetLeague_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeagueId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaguesServiceServer).GetLeague(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaguesService_GetLeague_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaguesServiceServer).GetLeague(ctx, req.(*LeagueId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaguesService_GetLeagueStandings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeagueId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaguesServiceServer).GetLeagueStandings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaguesService_GetLeagueStandings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaguesServiceServer).GetLeagueStandings(ctx, req.(*LeagueId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaguesService_UpdateLeague_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLeagueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaguesServiceServer).UpdateLeague(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaguesService_UpdateLeague_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaguesServiceServer).UpdateLeague(ctx, req.(*UpdateLeagueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaguesService_DeleteLeague_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeagueId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaguesServiceServer).DeleteLeague(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaguesService_DeleteLeague_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaguesServiceServer).DeleteLeague(ctx, req.(*LeagueId))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaguesService_ServiceDesc is the grpc.ServiceDesc for LeaguesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaguesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LeaguesService",
	HandlerType: (*LeaguesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLeague",
			Handler:    _LeaguesService_CreateLeague_Handler,
		},
		{
			MethodName: "GetLeague",
			Handler:    _LeaguesService_GetLeague_Handler,
		},
		{
			MethodName: "GetLeagueStandings",
			Handler:    _LeaguesService_GetLeagueStandings_Handler,
		},
		{
			MethodName: "UpdateLeague",
			Handler:    _LeaguesService_UpdateLeague_Handler,
		},
		{
			MethodName: "DeleteLeague",
			Handler:    _LeaguesService_DeleteLeague_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/leagues.proto",
}
